// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Agility An integer that represents the Persona's Agility stat.
type Agility = int

// ArcanaID A universally unique identifier for identifying one of the 22 Major Arcana.
type ArcanaID = openapi_types.UUID

// ArcanaName The name of the Major Arcana.
type ArcanaName = string

// ArcanaNumber A number from 0 - 21 representing one of the 22 Major Arcana from tarot cards.
type ArcanaNumber = int

// ArcanaNumeral A Roman numeral representation of the Arcana Number. The exeception is the Fool Arcana which does not have an associated numeral. It is represented with "0".
type ArcanaNumeral = string

// CreatedAt Represents when the object was added to the database.
type CreatedAt time.Time

// Endurance An integer that represents the Persona's Endurance stat.
type Endurance = int

// ErrorBaseResponse defines model for ErrorBaseResponse.
type ErrorBaseResponse struct {
	Code    int    `json:"Code"`
	Data    string `json:"Data"`
	Error   bool   `json:"Error"`
	Message string `json:"Message"`
	Ping    bool   `json:"Ping"`
}

// IsDLC Represents if the Persona is only available via Downloadable Content.
type IsDLC = bool

// IsTreasureDemon Represents if the Persona is a treasure demon. Unique field to Persona 5 and Persona 5 Royal.
type IsTreasureDemon = bool

// Level The level of the Persona when first encountered; usually during fusion. The main character must be at least this level in order to fuse this Persona.
type Level = int

// Luck An integer that represents the Persona's Luck stat.
type Luck = int

// Magic An integer that represents the Persona's Magic stat.
type Magic = int

// P5Arcana defines model for P5Arcana.
type P5Arcana struct {
	// ArcanaID A universally unique identifier for identifying one of the 22 Major Arcana.
	ArcanaID ArcanaID `gorm:"type:uuid;primaryKey" json:"ArcanaID"`

	// ArcanaName The name of the Major Arcana.
	ArcanaName ArcanaName `json:"ArcanaName" validate:"minLength=3,maxLength=10"`

	// ArcanaNumber A number from 0 - 21 representing one of the 22 Major Arcana from tarot cards.
	ArcanaNumber ArcanaNumber `json:"ArcanaNumber" validate:"minimum=0,maximum=21"`

	// ArcanaNumeral A Roman numeral representation of the Arcana Number. The exeception is the Fool Arcana which does not have an associated numeral. It is represented with "0".
	ArcanaNumeral ArcanaNumeral `json:"ArcanaNumeral"`
}

// P5ArcanaResponse defines model for P5ArcanaResponse.
type P5ArcanaResponse struct {
	// ArcanaName The name of the Major Arcana.
	ArcanaName ArcanaName `json:"ArcanaName" validate:"minLength=3,maxLength=10"`

	// ArcanaNumber A number from 0 - 21 representing one of the 22 Major Arcana from tarot cards.
	ArcanaNumber ArcanaNumber `json:"ArcanaNumber" validate:"minimum=0,maximum=21"`

	// ArcanaNumeral A Roman numeral representation of the Arcana Number. The exeception is the Fool Arcana which does not have an associated numeral. It is represented with "0".
	ArcanaNumeral ArcanaNumeral `json:"ArcanaNumeral"`
}

// P5Persona defines model for P5Persona.
type P5Persona struct {
	// Agility An integer that represents the Persona's Agility stat.
	Agility *Agility `json:"Agility,omitempty" validate:"minimum=1,maximum=99"`

	// Arcana The name of the Major Arcana.
	Arcana *ArcanaName `json:"Arcana,omitempty" validate:"minLength=3,maxLength=10"`

	// CreatedAt Represents when the object was added to the database.
	CreatedAt CreatedAt `json:"-"`

	// Endurance An integer that represents the Persona's Endurance stat.
	Endurance *Endurance `json:"Endurance,omitempty" validate:"minimum=1,maximum=99"`

	// IsDLC Represents if the Persona is only available via Downloadable Content.
	IsDLC *IsDLC `json:"IsDLC,omitempty"`

	// IsTreasureDemon Represents if the Persona is a treasure demon. Unique field to Persona 5 and Persona 5 Royal.
	IsTreasureDemon *IsTreasureDemon `json:"IsTreasureDemon,omitempty"`

	// Level The level of the Persona when first encountered; usually during fusion. The main character must be at least this level in order to fuse this Persona.
	Level Level `json:"Level" validate:"minimum=1,maximum=99"`

	// Luck An integer that represents the Persona's Luck stat.
	Luck *Luck `json:"Luck,omitempty" validate:"minimum=1,maximum=99"`

	// Magic An integer that represents the Persona's Magic stat.
	Magic *Magic `json:"Magic,omitempty" validate:"minimum=1,maximum=99"`

	// Name The name of the Persona.
	Name PersonaName `json:"Name" validate:"minimum=1,maximum=24"`

	// P5PersonaID A universally unique identifier for identifying a Persona from Persona 5.
	P5PersonaID P5PersonaID `gorm:"type:uuid;primaryKey" json:"P5PersonaID"`

	// Strength An integer that represents the Persona's Strength stat.
	Strength *Strength `json:"Strength,omitempty" validate:"minimum=1,maximum=99"`

	// UpdatedAt Represents the last time when the object was updated in the database.
	UpdatedAt UpdatedAt `json:"-"`
}

// P5PersonaID A universally unique identifier for identifying a Persona from Persona 5.
type P5PersonaID = openapi_types.UUID

// P5PersonaSkillJunction defines model for P5PersonaSkillJunction.
type P5PersonaSkillJunction struct {
	// LevelLearned The in-game level when the Persona learns the skill.
	LevelLearned *P5SkillLevelLearned `json:"LevelLearned,omitempty"`

	// Name The name of the Persona.
	Name *PersonaName `json:"Name,omitempty" validate:"minimum=1,maximum=24"`

	// SkillCost The cost to use the skill.
	SkillCost *P5SkillCost `json:"SkillCost,omitempty"`

	// SkillEffect The in-game description of what the skill does when used by the player.
	SkillEffect *P5SkillEffect `json:"SkillEffect,omitempty"`

	// SkillName The in-game name for the skill.
	SkillName *P5SkillName `json:"SkillName,omitempty"`
}

// P5PersonaSkills defines model for P5PersonaSkills.
type P5PersonaSkills struct {
	// CreatedAt Represents when the object was added to the database.
	CreatedAt *CreatedAt `json:"-"`

	// SkillCost The cost to use the skill.
	SkillCost *P5SkillCost `json:"SkillCost,omitempty"`

	// SkillEffect The in-game description of what the skill does when used by the player.
	SkillEffect *P5SkillEffect `json:"SkillEffect,omitempty"`

	// SkillName The in-game name for the skill.
	SkillName *P5SkillName `json:"SkillName,omitempty"`

	// UpdatedAt Represents the last time when the object was updated in the database.
	UpdatedAt *UpdatedAt `json:"-"`
}

// P5SkillCost The cost to use the skill.
type P5SkillCost = string

// P5SkillEffect The in-game description of what the skill does when used by the player.
type P5SkillEffect = string

// P5SkillLevelLearned The in-game level when the Persona learns the skill.
type P5SkillLevelLearned = int

// P5SkillName The in-game name for the skill.
type P5SkillName = string

// PersonaName The name of the Persona.
type PersonaName = string

// Strength An integer that represents the Persona's Strength stat.
type Strength = int

// UpdatedAt Represents the last time when the object was updated in the database.
type UpdatedAt time.Time

// BadRequest defines model for BadRequest.
type BadRequest = ErrorBaseResponse

// Forbidden defines model for Forbidden.
type Forbidden = ErrorBaseResponse

// GetAllPersona5Arcanas defines model for GetAllPersona5Arcanas.
type GetAllPersona5Arcanas = []P5ArcanaResponse

// GetPersona5Arcana defines model for GetPersona5Arcana.
type GetPersona5Arcana = P5ArcanaResponse

// MissingSubject defines model for MissingSubject.
type MissingSubject = ErrorBaseResponse

// NoContent defines model for NoContent.
type NoContent = map[string]interface{}

// NotFound defines model for NotFound.
type NotFound = ErrorBaseResponse

// ServerError defines model for ServerError.
type ServerError = ErrorBaseResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorBaseResponse

// GetAllPersona5ArcanasParams defines parameters for GetAllPersona5Arcanas.
type GetAllPersona5ArcanasParams struct {
	// Limit The maximum number of records to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The number of records to skip.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreatePersona5PersonaJSONRequestBody defines body for CreatePersona5Persona for application/json ContentType.
type CreatePersona5PersonaJSONRequestBody = P5Persona

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllPersona5Arcanas request
	GetAllPersona5Arcanas(ctx context.Context, params *GetAllPersona5ArcanasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersona5ArcanaByUUID request
	GetPersona5ArcanaByUUID(ctx context.Context, arcanaUUID ArcanaID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersona5ArcanaByName request
	GetPersona5ArcanaByName(ctx context.Context, arcanaName ArcanaName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePersona5Persona request with any body
	CreatePersona5PersonaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePersona5Persona(ctx context.Context, body CreatePersona5PersonaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllPersona5Arcanas(ctx context.Context, params *GetAllPersona5ArcanasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllPersona5ArcanasRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersona5ArcanaByUUID(ctx context.Context, arcanaUUID ArcanaID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersona5ArcanaByUUIDRequest(c.Server, arcanaUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersona5ArcanaByName(ctx context.Context, arcanaName ArcanaName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersona5ArcanaByNameRequest(c.Server, arcanaName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePersona5PersonaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePersona5PersonaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePersona5Persona(ctx context.Context, body CreatePersona5PersonaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePersona5PersonaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllPersona5ArcanasRequest generates requests for GetAllPersona5Arcanas
func NewGetAllPersona5ArcanasRequest(server string, params *GetAllPersona5ArcanasParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grimoire/v1/p5/arcana/all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersona5ArcanaByUUIDRequest generates requests for GetPersona5ArcanaByUUID
func NewGetPersona5ArcanaByUUIDRequest(server string, arcanaUUID ArcanaID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "arcanaUUID", runtime.ParamLocationPath, arcanaUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grimoire/v1/p5/arcana/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersona5ArcanaByNameRequest generates requests for GetPersona5ArcanaByName
func NewGetPersona5ArcanaByNameRequest(server string, arcanaName ArcanaName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "arcanaName", runtime.ParamLocationPath, arcanaName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grimoire/v1/p5/arcana/name/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePersona5PersonaRequest calls the generic CreatePersona5Persona builder with application/json body
func NewCreatePersona5PersonaRequest(server string, body CreatePersona5PersonaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePersona5PersonaRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePersona5PersonaRequestWithBody generates requests for CreatePersona5Persona with any type of body
func NewCreatePersona5PersonaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grimoire/v1/p5/persona/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllPersona5Arcanas request
	GetAllPersona5ArcanasWithResponse(ctx context.Context, params *GetAllPersona5ArcanasParams, reqEditors ...RequestEditorFn) (*GetAllPersona5ArcanasResponse, error)

	// GetPersona5ArcanaByUUID request
	GetPersona5ArcanaByUUIDWithResponse(ctx context.Context, arcanaUUID ArcanaID, reqEditors ...RequestEditorFn) (*GetPersona5ArcanaByUUIDResponse, error)

	// GetPersona5ArcanaByName request
	GetPersona5ArcanaByNameWithResponse(ctx context.Context, arcanaName ArcanaName, reqEditors ...RequestEditorFn) (*GetPersona5ArcanaByNameResponse, error)

	// CreatePersona5Persona request with any body
	CreatePersona5PersonaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePersona5PersonaResponse, error)

	CreatePersona5PersonaWithResponse(ctx context.Context, body CreatePersona5PersonaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePersona5PersonaResponse, error)
}

type GetAllPersona5ArcanasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]P5ArcanaResponse
	JSON400      *ErrorBaseResponse
	JSON500      *ErrorBaseResponse
}

// Status returns HTTPResponse.Status
func (r GetAllPersona5ArcanasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllPersona5ArcanasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersona5ArcanaByUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *P5ArcanaResponse
	JSON404      *ErrorBaseResponse
	JSON500      *ErrorBaseResponse
}

// Status returns HTTPResponse.Status
func (r GetPersona5ArcanaByUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersona5ArcanaByUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersona5ArcanaByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *P5ArcanaResponse
	JSON404      *ErrorBaseResponse
	JSON500      *ErrorBaseResponse
}

// Status returns HTTPResponse.Status
func (r GetPersona5ArcanaByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersona5ArcanaByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePersona5PersonaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreatePersona5PersonaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePersona5PersonaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllPersona5ArcanasWithResponse request returning *GetAllPersona5ArcanasResponse
func (c *ClientWithResponses) GetAllPersona5ArcanasWithResponse(ctx context.Context, params *GetAllPersona5ArcanasParams, reqEditors ...RequestEditorFn) (*GetAllPersona5ArcanasResponse, error) {
	rsp, err := c.GetAllPersona5Arcanas(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllPersona5ArcanasResponse(rsp)
}

// GetPersona5ArcanaByUUIDWithResponse request returning *GetPersona5ArcanaByUUIDResponse
func (c *ClientWithResponses) GetPersona5ArcanaByUUIDWithResponse(ctx context.Context, arcanaUUID ArcanaID, reqEditors ...RequestEditorFn) (*GetPersona5ArcanaByUUIDResponse, error) {
	rsp, err := c.GetPersona5ArcanaByUUID(ctx, arcanaUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersona5ArcanaByUUIDResponse(rsp)
}

// GetPersona5ArcanaByNameWithResponse request returning *GetPersona5ArcanaByNameResponse
func (c *ClientWithResponses) GetPersona5ArcanaByNameWithResponse(ctx context.Context, arcanaName ArcanaName, reqEditors ...RequestEditorFn) (*GetPersona5ArcanaByNameResponse, error) {
	rsp, err := c.GetPersona5ArcanaByName(ctx, arcanaName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersona5ArcanaByNameResponse(rsp)
}

// CreatePersona5PersonaWithBodyWithResponse request with arbitrary body returning *CreatePersona5PersonaResponse
func (c *ClientWithResponses) CreatePersona5PersonaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePersona5PersonaResponse, error) {
	rsp, err := c.CreatePersona5PersonaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePersona5PersonaResponse(rsp)
}

func (c *ClientWithResponses) CreatePersona5PersonaWithResponse(ctx context.Context, body CreatePersona5PersonaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePersona5PersonaResponse, error) {
	rsp, err := c.CreatePersona5Persona(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePersona5PersonaResponse(rsp)
}

// ParseGetAllPersona5ArcanasResponse parses an HTTP response from a GetAllPersona5ArcanasWithResponse call
func ParseGetAllPersona5ArcanasResponse(rsp *http.Response) (*GetAllPersona5ArcanasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllPersona5ArcanasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []P5ArcanaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPersona5ArcanaByUUIDResponse parses an HTTP response from a GetPersona5ArcanaByUUIDWithResponse call
func ParseGetPersona5ArcanaByUUIDResponse(rsp *http.Response) (*GetPersona5ArcanaByUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersona5ArcanaByUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest P5ArcanaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPersona5ArcanaByNameResponse parses an HTTP response from a GetPersona5ArcanaByNameWithResponse call
func ParseGetPersona5ArcanaByNameResponse(rsp *http.Response) (*GetPersona5ArcanaByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersona5ArcanaByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest P5ArcanaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePersona5PersonaResponse parses an HTTP response from a CreatePersona5PersonaWithResponse call
func ParseCreatePersona5PersonaResponse(rsp *http.Response) (*CreatePersona5PersonaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePersona5PersonaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /grimoire/v1/p5/arcana/all)
	GetAllPersona5Arcanas(ctx echo.Context, params GetAllPersona5ArcanasParams) error

	// (GET /grimoire/v1/p5/arcana/id/{arcanaUUID})
	GetPersona5ArcanaByUUID(ctx echo.Context, arcanaUUID ArcanaID) error

	// (GET /grimoire/v1/p5/arcana/name/{arcanaName})
	GetPersona5ArcanaByName(ctx echo.Context, arcanaName ArcanaName) error

	// (POST /grimoire/v1/p5/persona/create)
	CreatePersona5Persona(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllPersona5Arcanas converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPersona5Arcanas(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllPersona5ArcanasParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllPersona5Arcanas(ctx, params)
	return err
}

// GetPersona5ArcanaByUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPersona5ArcanaByUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "arcanaUUID" -------------
	var arcanaUUID ArcanaID

	err = runtime.BindStyledParameterWithLocation("simple", false, "arcanaUUID", runtime.ParamLocationPath, ctx.Param("arcanaUUID"), &arcanaUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arcanaUUID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPersona5ArcanaByUUID(ctx, arcanaUUID)
	return err
}

// GetPersona5ArcanaByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetPersona5ArcanaByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "arcanaName" -------------
	var arcanaName ArcanaName

	err = runtime.BindStyledParameterWithLocation("simple", false, "arcanaName", runtime.ParamLocationPath, ctx.Param("arcanaName"), &arcanaName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arcanaName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPersona5ArcanaByName(ctx, arcanaName)
	return err
}

// CreatePersona5Persona converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePersona5Persona(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePersona5Persona(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/grimoire/v1/p5/arcana/all", wrapper.GetAllPersona5Arcanas)
	router.GET(baseURL+"/grimoire/v1/p5/arcana/id/:arcanaUUID", wrapper.GetPersona5ArcanaByUUID)
	router.GET(baseURL+"/grimoire/v1/p5/arcana/name/:arcanaName", wrapper.GetPersona5ArcanaByName)
	router.POST(baseURL+"/grimoire/v1/p5/persona/create", wrapper.CreatePersona5Persona)

}

type BadRequestJSONResponse ErrorBaseResponse

type ForbiddenJSONResponse ErrorBaseResponse

type GetAllPersona5ArcanasJSONResponse []P5ArcanaResponse

type GetPersona5ArcanaJSONResponse P5ArcanaResponse

type MissingSubjectJSONResponse ErrorBaseResponse

type NoContentJSONResponse map[string]interface{}

type NotFoundJSONResponse ErrorBaseResponse

type ServerErrorJSONResponse ErrorBaseResponse

type UnauthorizedJSONResponse ErrorBaseResponse

type GetAllPersona5ArcanasRequestObject struct {
	Params GetAllPersona5ArcanasParams
}

type GetAllPersona5ArcanasResponseObject interface {
	VisitGetAllPersona5ArcanasResponse(w http.ResponseWriter) error
}

type GetAllPersona5Arcanas200JSONResponse = GetAllPersona5ArcanasJSONResponse

func (response GetAllPersona5Arcanas200JSONResponse) VisitGetAllPersona5ArcanasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPersona5Arcanas400JSONResponse = BadRequestJSONResponse

func (response GetAllPersona5Arcanas400JSONResponse) VisitGetAllPersona5ArcanasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllPersona5Arcanas500JSONResponse = ServerErrorJSONResponse

func (response GetAllPersona5Arcanas500JSONResponse) VisitGetAllPersona5ArcanasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByUUIDRequestObject struct {
	ArcanaUUID ArcanaID `json:"arcanaUUID"`
}

type GetPersona5ArcanaByUUIDResponseObject interface {
	VisitGetPersona5ArcanaByUUIDResponse(w http.ResponseWriter) error
}

type GetPersona5ArcanaByUUID200JSONResponse = GetPersona5ArcanaJSONResponse

func (response GetPersona5ArcanaByUUID200JSONResponse) VisitGetPersona5ArcanaByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByUUID404JSONResponse = NotFoundJSONResponse

func (response GetPersona5ArcanaByUUID404JSONResponse) VisitGetPersona5ArcanaByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByUUID500JSONResponse = ServerErrorJSONResponse

func (response GetPersona5ArcanaByUUID500JSONResponse) VisitGetPersona5ArcanaByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByNameRequestObject struct {
	ArcanaName ArcanaName `json:"arcanaName"`
}

type GetPersona5ArcanaByNameResponseObject interface {
	VisitGetPersona5ArcanaByNameResponse(w http.ResponseWriter) error
}

type GetPersona5ArcanaByName200JSONResponse = GetPersona5ArcanaJSONResponse

func (response GetPersona5ArcanaByName200JSONResponse) VisitGetPersona5ArcanaByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByName404JSONResponse = NotFoundJSONResponse

func (response GetPersona5ArcanaByName404JSONResponse) VisitGetPersona5ArcanaByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByName500JSONResponse = ServerErrorJSONResponse

func (response GetPersona5ArcanaByName500JSONResponse) VisitGetPersona5ArcanaByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePersona5PersonaRequestObject struct {
	Body *CreatePersona5PersonaJSONRequestBody
}

type CreatePersona5PersonaResponseObject interface {
	VisitCreatePersona5PersonaResponse(w http.ResponseWriter) error
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /grimoire/v1/p5/arcana/all)
	GetAllPersona5Arcanas(ctx context.Context, request GetAllPersona5ArcanasRequestObject) (GetAllPersona5ArcanasResponseObject, error)

	// (GET /grimoire/v1/p5/arcana/id/{arcanaUUID})
	GetPersona5ArcanaByUUID(ctx context.Context, request GetPersona5ArcanaByUUIDRequestObject) (GetPersona5ArcanaByUUIDResponseObject, error)

	// (GET /grimoire/v1/p5/arcana/name/{arcanaName})
	GetPersona5ArcanaByName(ctx context.Context, request GetPersona5ArcanaByNameRequestObject) (GetPersona5ArcanaByNameResponseObject, error)

	// (POST /grimoire/v1/p5/persona/create)
	CreatePersona5Persona(ctx context.Context, request CreatePersona5PersonaRequestObject) (CreatePersona5PersonaResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllPersona5Arcanas operation middleware
func (sh *strictHandler) GetAllPersona5Arcanas(ctx echo.Context, params GetAllPersona5ArcanasParams) error {
	var request GetAllPersona5ArcanasRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllPersona5Arcanas(ctx.Request().Context(), request.(GetAllPersona5ArcanasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllPersona5Arcanas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllPersona5ArcanasResponseObject); ok {
		return validResponse.VisitGetAllPersona5ArcanasResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPersona5ArcanaByUUID operation middleware
func (sh *strictHandler) GetPersona5ArcanaByUUID(ctx echo.Context, arcanaUUID ArcanaID) error {
	var request GetPersona5ArcanaByUUIDRequestObject

	request.ArcanaUUID = arcanaUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPersona5ArcanaByUUID(ctx.Request().Context(), request.(GetPersona5ArcanaByUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPersona5ArcanaByUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPersona5ArcanaByUUIDResponseObject); ok {
		return validResponse.VisitGetPersona5ArcanaByUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPersona5ArcanaByName operation middleware
func (sh *strictHandler) GetPersona5ArcanaByName(ctx echo.Context, arcanaName ArcanaName) error {
	var request GetPersona5ArcanaByNameRequestObject

	request.ArcanaName = arcanaName

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPersona5ArcanaByName(ctx.Request().Context(), request.(GetPersona5ArcanaByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPersona5ArcanaByName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPersona5ArcanaByNameResponseObject); ok {
		return validResponse.VisitGetPersona5ArcanaByNameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreatePersona5Persona operation middleware
func (sh *strictHandler) CreatePersona5Persona(ctx echo.Context) error {
	var request CreatePersona5PersonaRequestObject

	var body CreatePersona5PersonaJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePersona5Persona(ctx.Request().Context(), request.(CreatePersona5PersonaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePersona5Persona")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreatePersona5PersonaResponseObject); ok {
		return validResponse.VisitCreatePersona5PersonaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
