// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
)

// Agility An integer that represents the Persona's Agility stat.
type Agility = int

// ArcanaID A universally unique identifier for identifying one of the 22 Major Arcana.
type ArcanaID uuid.UUID

// ArcanaName The name of the Major Arcana.
type ArcanaName = string

// ArcanaNumber A number from 0 - 21 representing one of the 22 Major Arcana from tarot cards.
type ArcanaNumber = int

// ArcanaNumeral A Roman numeral representation of the Arcana Number. The exeception is the Fool Arcana which does not have an associated numeral. It is represented with "0".
type ArcanaNumeral = string

// CreatedAt Represents when the object was added to the database.
type CreatedAt time.Time

// Endurance An integer that represents the Persona's Endurance stat.
type Endurance = int

// ErrorBaseResponse defines model for ErrorBaseResponse.
type ErrorBaseResponse struct {
	Code    int    `json:"Code"`
	Data    string `json:"Data"`
	Error   bool   `json:"Error"`
	Message string `json:"Message"`
	Ping    bool   `json:"Ping"`
}

// IsDLC Represents if the Persona is only available via Downloadable Content.
type IsDLC = bool

// IsTreasureDemon Represents if the Persona is a treasure demon. Unique field to Persona 5 and Persona 5 Royal.
type IsTreasureDemon = bool

// Level The level of the Persona when first encountered; usually during fusion. The main character must be at least this level in order to fuse this Persona.
type Level = int

// Luck An integer that represents the Persona's Luck stat.
type Luck = int

// Magic An integer that represents the Persona's Magic stat.
type Magic = int

// P5Arcana defines model for P5Arcana.
type P5Arcana struct {
	// ArcanaID A universally unique identifier for identifying one of the 22 Major Arcana.
	ArcanaID ArcanaID `gorm:"type:uuid;primaryKey" json:"ArcanaID"`

	// ArcanaName The name of the Major Arcana.
	ArcanaName ArcanaName `json:"ArcanaName"`

	// ArcanaNumber A number from 0 - 21 representing one of the 22 Major Arcana from tarot cards.
	ArcanaNumber ArcanaNumber `json:"ArcanaNumber" validate:"min=0,max=21"`

	// ArcanaNumeral A Roman numeral representation of the Arcana Number. The exeception is the Fool Arcana which does not have an associated numeral. It is represented with "0".
	ArcanaNumeral ArcanaNumeral `json:"ArcanaNumeral"`
}

// P5Persona defines model for P5Persona.
type P5Persona struct {
	// Arcana A universally unique identifier for identifying one of the 22 Major Arcana.
	Arcana ArcanaID `gorm:"type:uuid;primaryKey" json:"Arcana"`

	// CreatedAt Represents when the object was added to the database.
	CreatedAt CreatedAt `json:"-"`

	// IsDLC Represents if the Persona is only available via Downloadable Content.
	IsDLC *IsDLC `json:"IsDLC,omitempty"`

	// IsTreasureDemon Represents if the Persona is a treasure demon. Unique field to Persona 5 and Persona 5 Royal.
	IsTreasureDemon *IsTreasureDemon `json:"IsTreasureDemon,omitempty"`

	// Level The level of the Persona when first encountered; usually during fusion. The main character must be at least this level in order to fuse this Persona.
	Level Level `json:"Level" validate:"min=1,max=99"`

	// P5PersonaID A universally unique identifier for identifying a Persona from Persona 5.
	P5PersonaID *P5PersonaID `gorm:"type:uuid;primaryKey" json:"P5PersonaID,omitempty"`

	// PersonaName The name of the Persona.
	PersonaName *PersonaName `json:"PersonaName,omitempty" validate:"min=1,max=24"`

	// Skill A universally unique identifier for identifying a skill that a Persona 5 Persona can learn.
	Skill *P5SkillID `gorm:"type:uuid;primaryKey" json:"Skill,omitempty"`

	// UpdatedAt Represents the last time when the object was updated in the database.
	UpdatedAt UpdatedAt `json:"-"`
}

// P5PersonaID A universally unique identifier for identifying a Persona from Persona 5.
type P5PersonaID uuid.UUID

// P5PersonaSkill defines model for P5PersonaSkill.
type P5PersonaSkill struct {
	// CreatedAt Represents when the object was added to the database.
	CreatedAt *CreatedAt `json:"-"`

	// SkillCost The cost to use the skill.
	SkillCost *SkillCost `json:"SkillCost,omitempty"`

	// SkillEffect The in-game description of what the skill does when used by the player.
	SkillEffect *SkillEffect `json:"SkillEffect,omitempty"`

	// SkillID A universally unique identifier for identifying a skill that a Persona 5 Persona can learn.
	SkillID *P5SkillID `gorm:"type:uuid;primaryKey" json:"SkillID,omitempty"`

	// SkillName The in-game name for the skill.
	SkillName *SkillName `json:"SkillName,omitempty"`

	// UpdatedAt Represents the last time when the object was updated in the database.
	UpdatedAt *UpdatedAt `json:"-"`
}

// P5PersonaStats defines model for P5PersonaStats.
type P5PersonaStats struct {
	// Agility An integer that represents the Persona's Agility stat.
	Agility Agility `json:"Agility" validate:"min=1,max=99"`

	// Endurance An integer that represents the Persona's Endurance stat.
	Endurance Endurance `json:"Endurance" validate:"min=1,max=99"`

	// Luck An integer that represents the Persona's Luck stat.
	Luck Luck `json:"Luck" validate:"min=1,max=99"`

	// Magic An integer that represents the Persona's Magic stat.
	Magic Magic `json:"Magic" validate:"min=1,max=99"`

	// StatsID A universally unique identifier for identifying a Persona 5 Persona's stats.
	StatsID uuid.UUID `gorm:"type:uuid;primaryKey" json:"StatsID"`

	// Strength An integer that represents the Persona's Strength stat.
	Strength Strength `json:"Strength" validate:"min=1,max=99"`
}

// P5SkillID A universally unique identifier for identifying a skill that a Persona 5 Persona can learn.
type P5SkillID uuid.UUID

// PersonaName The name of the Persona.
type PersonaName = string

// SkillCost The cost to use the skill.
type SkillCost = string

// SkillEffect The in-game description of what the skill does when used by the player.
type SkillEffect = string

// SkillName The in-game name for the skill.
type SkillName = string

// Strength An integer that represents the Persona's Strength stat.
type Strength = int

// UpdatedAt Represents the last time when the object was updated in the database.
type UpdatedAt time.Time

// BadRequest defines model for BadRequest.
type BadRequest = ErrorBaseResponse

// Forbidden defines model for Forbidden.
type Forbidden = ErrorBaseResponse

// GetArcanaByUUID defines model for GetArcanaByUUID.
type GetArcanaByUUID = P5Arcana

// MissingSubject defines model for MissingSubject.
type MissingSubject = ErrorBaseResponse

// NoContent defines model for NoContent.
type NoContent = map[string]interface{}

// NotFound defines model for NotFound.
type NotFound = ErrorBaseResponse

// ServerError defines model for ServerError.
type ServerError = ErrorBaseResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorBaseResponse

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPersona5ArcanaByUUID request
	GetPersona5ArcanaByUUID(ctx context.Context, arcanaUUID ArcanaID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersona5ArcanaByName request
	GetPersona5ArcanaByName(ctx context.Context, arcanaName ArcanaName, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPersona5ArcanaByUUID(ctx context.Context, arcanaUUID ArcanaID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersona5ArcanaByUUIDRequest(c.Server, arcanaUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersona5ArcanaByName(ctx context.Context, arcanaName ArcanaName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersona5ArcanaByNameRequest(c.Server, arcanaName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPersona5ArcanaByUUIDRequest generates requests for GetPersona5ArcanaByUUID
func NewGetPersona5ArcanaByUUIDRequest(server string, arcanaUUID ArcanaID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "arcanaUUID", runtime.ParamLocationPath, arcanaUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grimoire/v1/p5/arcana/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersona5ArcanaByNameRequest generates requests for GetPersona5ArcanaByName
func NewGetPersona5ArcanaByNameRequest(server string, arcanaName ArcanaName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "arcanaName", runtime.ParamLocationPath, arcanaName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/grimoire/v1/p5/arcana/name/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPersona5ArcanaByUUID request
	GetPersona5ArcanaByUUIDWithResponse(ctx context.Context, arcanaUUID ArcanaID, reqEditors ...RequestEditorFn) (*GetPersona5ArcanaByUUIDResponse, error)

	// GetPersona5ArcanaByName request
	GetPersona5ArcanaByNameWithResponse(ctx context.Context, arcanaName ArcanaName, reqEditors ...RequestEditorFn) (*GetPersona5ArcanaByNameResponse, error)
}

type GetPersona5ArcanaByUUIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *P5Arcana
	JSON404      *ErrorBaseResponse
	JSON500      *ErrorBaseResponse
}

// Status returns HTTPResponse.Status
func (r GetPersona5ArcanaByUUIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersona5ArcanaByUUIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersona5ArcanaByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *P5Arcana
	JSON404      *ErrorBaseResponse
	JSON500      *ErrorBaseResponse
}

// Status returns HTTPResponse.Status
func (r GetPersona5ArcanaByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersona5ArcanaByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPersona5ArcanaByUUIDWithResponse request returning *GetPersona5ArcanaByUUIDResponse
func (c *ClientWithResponses) GetPersona5ArcanaByUUIDWithResponse(ctx context.Context, arcanaUUID ArcanaID, reqEditors ...RequestEditorFn) (*GetPersona5ArcanaByUUIDResponse, error) {
	rsp, err := c.GetPersona5ArcanaByUUID(ctx, arcanaUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersona5ArcanaByUUIDResponse(rsp)
}

// GetPersona5ArcanaByNameWithResponse request returning *GetPersona5ArcanaByNameResponse
func (c *ClientWithResponses) GetPersona5ArcanaByNameWithResponse(ctx context.Context, arcanaName ArcanaName, reqEditors ...RequestEditorFn) (*GetPersona5ArcanaByNameResponse, error) {
	rsp, err := c.GetPersona5ArcanaByName(ctx, arcanaName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersona5ArcanaByNameResponse(rsp)
}

// ParseGetPersona5ArcanaByUUIDResponse parses an HTTP response from a GetPersona5ArcanaByUUIDWithResponse call
func ParseGetPersona5ArcanaByUUIDResponse(rsp *http.Response) (*GetPersona5ArcanaByUUIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersona5ArcanaByUUIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest P5Arcana
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPersona5ArcanaByNameResponse parses an HTTP response from a GetPersona5ArcanaByNameWithResponse call
func ParseGetPersona5ArcanaByNameResponse(rsp *http.Response) (*GetPersona5ArcanaByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersona5ArcanaByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest P5Arcana
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorBaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /grimoire/v1/p5/arcana/id/{arcanaUUID})
	GetPersona5ArcanaByUUID(ctx echo.Context, arcanaUUID ArcanaID) error

	// (GET /grimoire/v1/p5/arcana/name/{arcanaName})
	GetPersona5ArcanaByName(ctx echo.Context, arcanaName ArcanaName) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPersona5ArcanaByUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPersona5ArcanaByUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "arcanaUUID" -------------
	var arcanaUUID ArcanaID

	err = runtime.BindStyledParameterWithLocation("simple", false, "arcanaUUID", runtime.ParamLocationPath, ctx.Param("arcanaUUID"), &arcanaUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arcanaUUID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPersona5ArcanaByUUID(ctx, arcanaUUID)
	return err
}

// GetPersona5ArcanaByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetPersona5ArcanaByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "arcanaName" -------------
	var arcanaName ArcanaName

	err = runtime.BindStyledParameterWithLocation("simple", false, "arcanaName", runtime.ParamLocationPath, ctx.Param("arcanaName"), &arcanaName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter arcanaName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPersona5ArcanaByName(ctx, arcanaName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/grimoire/v1/p5/arcana/id/:arcanaUUID", wrapper.GetPersona5ArcanaByUUID)
	router.GET(baseURL+"/grimoire/v1/p5/arcana/name/:arcanaName", wrapper.GetPersona5ArcanaByName)

}

type BadRequestJSONResponse ErrorBaseResponse

type ForbiddenJSONResponse ErrorBaseResponse

type GetArcanaByUUIDJSONResponse P5Arcana

type MissingSubjectJSONResponse ErrorBaseResponse

type NoContentJSONResponse map[string]interface{}

type NotFoundJSONResponse ErrorBaseResponse

type ServerErrorJSONResponse ErrorBaseResponse

type UnauthorizedJSONResponse ErrorBaseResponse

type GetPersona5ArcanaByUUIDRequestObject struct {
	ArcanaUUID ArcanaID `json:"arcanaUUID"`
}

type GetPersona5ArcanaByUUIDResponseObject interface {
	VisitGetPersona5ArcanaByUUIDResponse(w http.ResponseWriter) error
}

type GetPersona5ArcanaByUUID200JSONResponse = GetArcanaByUUIDJSONResponse

func (response GetPersona5ArcanaByUUID200JSONResponse) VisitGetPersona5ArcanaByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByUUID404JSONResponse = NotFoundJSONResponse

func (response GetPersona5ArcanaByUUID404JSONResponse) VisitGetPersona5ArcanaByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByUUID500JSONResponse = ServerErrorJSONResponse

func (response GetPersona5ArcanaByUUID500JSONResponse) VisitGetPersona5ArcanaByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByNameRequestObject struct {
	ArcanaName ArcanaName `json:"arcanaName"`
}

type GetPersona5ArcanaByNameResponseObject interface {
	VisitGetPersona5ArcanaByNameResponse(w http.ResponseWriter) error
}

type GetPersona5ArcanaByName200JSONResponse = GetArcanaByUUIDJSONResponse

func (response GetPersona5ArcanaByName200JSONResponse) VisitGetPersona5ArcanaByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByName404JSONResponse = NotFoundJSONResponse

func (response GetPersona5ArcanaByName404JSONResponse) VisitGetPersona5ArcanaByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPersona5ArcanaByName500JSONResponse = ServerErrorJSONResponse

func (response GetPersona5ArcanaByName500JSONResponse) VisitGetPersona5ArcanaByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /grimoire/v1/p5/arcana/id/{arcanaUUID})
	GetPersona5ArcanaByUUID(ctx context.Context, request GetPersona5ArcanaByUUIDRequestObject) (GetPersona5ArcanaByUUIDResponseObject, error)

	// (GET /grimoire/v1/p5/arcana/name/{arcanaName})
	GetPersona5ArcanaByName(ctx context.Context, request GetPersona5ArcanaByNameRequestObject) (GetPersona5ArcanaByNameResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetPersona5ArcanaByUUID operation middleware
func (sh *strictHandler) GetPersona5ArcanaByUUID(ctx echo.Context, arcanaUUID ArcanaID) error {
	var request GetPersona5ArcanaByUUIDRequestObject

	request.ArcanaUUID = arcanaUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPersona5ArcanaByUUID(ctx.Request().Context(), request.(GetPersona5ArcanaByUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPersona5ArcanaByUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPersona5ArcanaByUUIDResponseObject); ok {
		return validResponse.VisitGetPersona5ArcanaByUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPersona5ArcanaByName operation middleware
func (sh *strictHandler) GetPersona5ArcanaByName(ctx echo.Context, arcanaName ArcanaName) error {
	var request GetPersona5ArcanaByNameRequestObject

	request.ArcanaName = arcanaName

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPersona5ArcanaByName(ctx.Request().Context(), request.(GetPersona5ArcanaByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPersona5ArcanaByName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPersona5ArcanaByNameResponseObject); ok {
		return validResponse.VisitGetPersona5ArcanaByNameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
